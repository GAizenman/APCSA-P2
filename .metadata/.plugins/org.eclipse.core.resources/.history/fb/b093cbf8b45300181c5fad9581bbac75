import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;
import java.util.List; // resolves problem with java.awt.List and java.util.List

/**
 * A class that represents a picture.  This class inherits from 
 * SimplePicture and allows the student to add functionality to
 * the Picture class.  
 * 
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture 
{
  ///////////////////// constructors //////////////////////////////////
  
  /**
   * Constructor that takes no arguments 
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit call to super()
     * child constructors always call a parent constructor 
     */
    super();  
  }
  
  /**
   * Constructor that takes a file name and creates the picture 
   * @param fileName the name of the file to create the picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
  }
  
  /**
   * Constructor that takes the width and height
   * @param height the height of the desired picture
   * @param width the width of the desired picture
   */
  public Picture(int height, int width)
  {
    // let the parent class handle this width and height
    super(width,height);
  }
  
  /**
   * Constructor that takes a picture and creates a 
   * copy of that picture
   * @param copyPicture the picture to copy
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }
  
  /**
   * Constructor that takes a buffered image
   * @param image the buffered image to use
   */
  public Picture(BufferedImage image)
  {
    super(image);
  }
  
  
  ////////////////////// methods ///////////////////////////////////////
  
  /**
   * Method to return a string with information about this picture.
   * @return a string with information about the picture such as fileName,
   * height and width.
   */
  public String toString()
  {
    String output = "Picture, filename " + getFileName() + 
      " height " + getHeight() 
      + " width " + getWidth();
    return output;
    
  }
  
  /** Method to set the blue to 0 */
  public void zeroBlue()
  {
    Pixel[][] pixels = this.getPixels2D();
    for (Pixel[] rowArray : pixels)
    {
      for (Pixel pixelObj : rowArray)
      {
        pixelObj.setBlue(0);
      }
    }
  }
  
  /** Method that mirrors the picture around a 
    * vertical mirror in the center of the picture
    * from left to right */
  public void mirrorVertical()
  {
    Pixel[][] pixels = this.getPixels2D();
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    int width = pixels[0].length;
    for (int row = 0; row < pixels.length; row++)
    {
      for (int col = 0; col < width / 2; col++)
      {
        leftPixel = pixels[row][col];
        rightPixel = pixels[row][width - 1 - col];
        rightPixel.setColor(leftPixel.getColor());
      }
    } 
  }
  
  /** Mirror just part of a picture of a temple */
  public void mirrorTemple()
  {
    int mirrorPoint = 276;
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    int count = 0;
    Pixel[][] pixels = this.getPixels2D();
    
    // loop through the rows
    for (int row = 27; row < 97; row++)
    {
      // loop from 13 to just before the mirror point
      for (int col = 13; col < mirrorPoint; col++)
      {
        
        leftPixel = pixels[row][col];      
        rightPixel = pixels[row]                       
                         [mirrorPoint - col + mirrorPoint];
        rightPixel.setColor(leftPixel.getColor());
      }
    }
  }
  
  /** copy from the passed fromPic to the
    * specified startRow and startCol in the
    * current picture
    * @param fromPic the picture to copy from
    * @param startRow the start row to copy to
    * @param startCol the start col to copy to
    */
  public void copy(Picture fromPic, 
                 int startRow, int startCol)
  {
    Pixel fromPixel = null;
    Pixel toPixel = null;
    Pixel[][] toPixels = this.getPixels2D();
    Pixel[][] fromPixels = fromPic.getPixels2D();
    for (int fromRow = 0, toRow = startRow; 
         fromRow < fromPixels.length &&
         toRow < toPixels.length; 
         fromRow++, toRow++)
    {
      for (int fromCol = 0, toCol = startCol; 
           fromCol < fromPixels[0].length &&
           toCol < toPixels[0].length;  
           fromCol++, toCol++)
      {
        fromPixel = fromPixels[fromRow][fromCol];
        toPixel = toPixels[toRow][toCol];
        toPixel.setColor(fromPixel.getColor());
      }
    }   
  }

  /** Method to create a collage of several pictures */
  public void createCollage()
  {
    Picture flower1 = new Picture("flower1.jpg");
    Picture flower2 = new Picture("flower2.jpg");
    this.copy(flower1,0,0);
    this.copy(flower2,100,0);
    this.copy(flower1,200,0);
    Picture flowerNoBlue = new Picture(flower2);
    flowerNoBlue.zeroBlue();
    this.copy(flowerNoBlue,300,0);
    this.copy(flower1,400,0);
    this.copy(flower2,500,0);
    this.mirrorVertical();
    this.write("collage.jpg");
  }
  
  
  /** Method to show large changes in color 
    * @param edgeDist the distance for finding edges
    */
  public void edgeDetection(int edgeDist)
  {
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    Pixel[][] pixels = this.getPixels2D();
    Color rightColor = null;
    for (int row = 0; row < pixels.length; row++)
    {
      for (int col = 0; 
           col < pixels[0].length-1; col++)
      {
        leftPixel = pixels[row][col];
        rightPixel = pixels[row][col+1];
        rightColor = rightPixel.getColor();
        if (leftPixel.colorDistance(rightColor) > 
            edgeDist)
          leftPixel.setColor(Color.BLACK);
        else
          leftPixel.setColor(Color.WHITE);
      }
    }
  }
  
  public void keepOnlyBlue(){
	  Pixel[][] pixels = this.getPixels2D();
	    for (Pixel[] rowArray : pixels)
	    {
	      for (Pixel pixelObj : rowArray)
	      {
	        pixelObj.setGreen(0);
	        pixelObj.setRed(0);
	      }
	    }
  }
  
  public void keepOnlyGreen(){
	  Pixel[][] pixels = this.getPixels2D();
	    for (Pixel[] rowArray : pixels)
	    {
	      for (Pixel pixelObj : rowArray)
	      {
	        pixelObj.setBlue(0);
	        pixelObj.setRed(0);
	      }
	    }
  }
  
  public void keepOnlyRed(){
	  Pixel[][] pixels = this.getPixels2D();
	    for (Pixel[] rowArray : pixels)
	    {
	      for (Pixel pixelObj : rowArray)
	      {
	        pixelObj.setGreen(0);
	        pixelObj.setBlue(0);
	      }
	    }
  }
  public void negate(){
	  Pixel[][] pixels = this.getPixels2D();
	    for (Pixel[] rowArray : pixels)
	    {
	      for (Pixel pixelObj : rowArray)
	      {
	    	pixelObj.setRed(255 - pixelObj.getRed());
	        pixelObj.setGreen(255 - pixelObj.getGreen());
	        pixelObj.setBlue(255 - pixelObj.getBlue());
	      }
	    }
  }
  
  public void grayscale(){
	  Pixel[][] pixels = this.getPixels2D();
	    for (Pixel[] rowArray : pixels)
	    {
	      for (Pixel pixelObj : rowArray)
	      {
	    	pixelObj.setRed((pixelObj.getRed() + pixelObj.getBlue() + pixelObj.getGreen())/3);
	        pixelObj.setGreen((pixelObj.getRed() + pixelObj.getBlue() + pixelObj.getGreen())/3);
	        pixelObj.setBlue((pixelObj.getRed() + pixelObj.getBlue() + pixelObj.getGreen())/3);
	      }
	    }
  }
  
  public void fixUnderwater(){
	  Pixel[][] pixels = this.getPixels2D();
	    for (Pixel[] rowArray : pixels)
	    {
	      for (Pixel pixelObj : rowArray)
	      {
	    	if (pixelObj.getBlue() < 160){
	    		pixelObj.setRed((pixelObj.getRed() + pixelObj.getBlue() + pixelObj.getGreen())/3);
		        pixelObj.setGreen((pixelObj.getRed() + pixelObj.getBlue() + pixelObj.getGreen())/3);
		        pixelObj.setBlue((pixelObj.getRed() + pixelObj.getBlue() + pixelObj.getGreen())/3);
	    	}
	    	else
	    		pixelObj.setRed(pixelObj.getRed() * 3);
	    		
	      }
	    }
  }
  
  public void mirrorVerticalRightToLeft()
  {
    Pixel[][] pixels = this.getPixels2D();
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    int width = pixels[0].length;
    for (int row = 0; row < pixels.length; row++)
    {
      for (int col = 0; col < width / 2; col++)
      {
        leftPixel = pixels[row][col];
        rightPixel = pixels[row][width - 1 - col];
        leftPixel.setColor(rightPixel.getColor());
      }
    } 
  }
  
  public void mirrorHorizontal()
  {
    Pixel[][] pixels = this.getPixels2D();
    Pixel topPixel = null;
    Pixel bottomPixel = null;
    int length = pixels.length;
    for (int col = 0; col < pixels.length; col++)
    {
      for (int row = 0; row < length / 2; row++)
      {
        topPixel = pixels[row][col];
        bottomPixel = pixels[length - 1 - row][col];
        bottomPixel.setColor(topPixel.getColor());
      }
    } 
  }
  
  public void mirrorHorizontalBotToTop()
  {
    Pixel[][] pixels = this.getPixels2D();
    Pixel topPixel = null;
    Pixel bottomPixel = null;
    int length = pixels.length;
    for (int col = 0; col < pixels.length; col++)
    {
      for (int row = 0; row < length / 2; row++)
      {
        topPixel = pixels[row][col];
        bottomPixel = pixels[length - 1 - row][col];
        topPixel.setColor(bottomPixel.getColor());
      }
    } 
  }
  
  public void mirrorArms()
  {
    int mirrorPoint = 193;
    Pixel topPixel = null;
    Pixel bottomPixel = null;
    Pixel[][] pixels = this.getPixels2D();

    // Left arm
    for (int row = 158; row < mirrorPoint; row++)
    {
      // loop from 13 to just before the mirror point
      for (int col = 103; col < 170; col++)
      {
        topPixel = pixels[row][col];      
        bottomPixel = pixels[mirrorPoint - row + mirrorPoint][col];
        bottomPixel.setColor(topPixel.getColor());
      }
    }
    
    int mirrorPoint2 = 198;
    Pixel topPixel2 = null;
    Pixel bottomPixel2 = null;
    
    // Right arm
    for (int row = 171; row < mirrorPoint2; row++)
    {
      // loop from 13 to just before the mirror point
      for (int col = 239; col < 294; col++)
      {
        topPixel2 = pixels[row][col];      
        bottomPixel2 = pixels[mirrorPoint2 - row + mirrorPoint2][col];
        bottomPixel2.setColor(topPixel2.getColor());
      }
    }
  }
  
  public void mirrorGull()
  {
    int mirrorPoint = 345;
    Pixel rightPixel = null;
    Pixel leftPixel = null;
    Pixel[][] pixels = this.getPixels2D();   
    
    // Seagull
    for (int row = 235; row < 323; row++)
    {
      for (int col = 238; col < mirrorPoint; col++)
      {
        rightPixel = pixels[row][col];      
        leftPixel = pixels[row][mirrorPoint - col + mirrorPoint/3];
        leftPixel.setColor(rightPixel.getColor());
      }
    }
  }
  
  public void mirrorDiagonal() // mirrors from top right to bottom left
  {
      Pixel[][] pixels = this.getPixels2D();
      Pixel topRightPixel = null;
      Pixel bottomLeftPixel = null;
      int maxLength;
      if (pixels.length < pixels[0].length) { maxLength = pixels.length; }
      else {maxLength = pixels[0].length; }
      
      for (int row = 0; row < maxLength; row++)
      {
          for (int col = row; col < maxLength; col++)
          {
              topRightPixel = pixels[row][col];
              bottomLeftPixel = pixels[col][row];
              bottomLeftPixel.setColor(topRightPixel.getColor());
          }
      }
  }
  
  public void copy(Picture fromPic, int fromStartRow, int fromStartCol, int fromEndRow, int fromEndCol, int toStartRow, int toStartCol )
	    {
	        Pixel fromPixel = null;
	        Pixel toPixel = null;
	        Pixel[][] toPixels = this.getPixels2D();
	        Pixel[][] fromPixels = fromPic.getPixels2D();
	        for ( int fromRow = fromStartRow, toRow = toStartRow; fromRow <= fromEndRow
	            && toRow < toPixels.length; fromRow++, toRow++ )
	        {
	            for ( int fromCol = fromStartCol, toCol = toStartCol; fromCol <= fromEndCol
	                && toCol < toPixels[0].length; fromCol++, toCol++ )
	            {
	                fromPixel = fromPixels[fromRow][fromCol];
	                toPixel = toPixels[toRow][toCol];
	                toPixel.setColor( fromPixel.getColor() );
	            }
	        }
	    }

  
  public void edgeDetection2( int edgeDist )
  {
      Picture copy = new Picture( this );
      Pixel leftPixel = null;
      Pixel rightPixel = null;
      Pixel[][] pixels = this.getPixels2D();
      Color rightColor = null;

      // Compare a pixel with the one below it. Set the pixel color of
      // the one below to black when the color distance is greater than
      // the specified edge distance.
      for ( int row = 0; row < pixels.length; row++ )
      {
          for ( int col = 0; col < pixels[0].length - 1; col++ )
          {
              leftPixel = pixels[row][col];
              rightPixel = pixels[row][col + 1];
              rightColor = rightPixel.getColor();
              if ( leftPixel.colorDistance( rightColor ) > edgeDist )
              {
                  leftPixel.setColor( Color.BLACK );
              }
              else
              {
                  leftPixel.setColor( Color.WHITE );
              }
          }
      }

      // Compare a pixel with the one below it. Set the pixel color of
      // the one below to black when the color distance is greater than
      // the specified edge distance.

      Pixel[][] copyPixels = copy.getPixels2D();
      Pixel topPixel = null;
      Pixel bottomPixel = null;
      Color bottomColor = null;
      for (int row = 0; row < copyPixels.length-1; row++)
      {
        for (int col = 0; col < copyPixels[0].length; col++)
        {
          topPixel = copyPixels[row][col];
          bottomPixel = copyPixels[row+1][col];
          bottomColor = bottomPixel.getColor();
          if (topPixel.colorDistance(bottomColor) > 
              edgeDist)
            pixels[row][col].setColor(Color.BLACK);
          
        }
      }
  }
  
  
  
  
  
  
  public void sharpen(int startRow, int startCol, int w, int h){
	  System.out.println("gabi");
	  Pixel[][] pixels = this.getPixels2D();
      Pixel topLeft = null;
      Pixel thePixel = null;
      int num1 = 0;
      int num2 = 0;
      int num3 = 0;
      int num4 = 0;
      for ( int row = startRow; row < h + startRow; row++ )
      {
          for ( int col = startCol; col < w + startCol; col++ )
          {
        	  thePixel = pixels[row][col];
        	  topLeft = pixels[row - 1][col - 1];
        	  
        	  num1 = thePixel.getBlue();
        	  num2 = topLeft.getBlue();
        	  num3 = Math.abs(num1 - num2);
        	  num4 = num1 + (num3 / 2);
        	  if (num4 > 255)
        		  thePixel.setBlue(255);
        	  else if (num4 < 0)
        		  thePixel.setBlue(0);
        	  else
        		  thePixel.setBlue(num4);
        	  
        	  num1 = thePixel.getRed();
        	  num2 = topLeft.getRed();
        	  num3 = Math.abs(num1 - num2);
        	  num4 = num1 + (num3 / 2);
        	  if (num4 > 255)
        		  thePixel.setRed(255);
        	  else if (num4 < 0)
        		  thePixel.setRed(0);
        	  else
        		  thePixel.setRed(num4);
        	  
        	  num1 = thePixel.getGreen();
        	  num2 = topLeft.getGreen();
        	  num3 = Math.abs(num1 - num2);
        	  num4 = num1 + (num3 / 2);
        	  if (num4 > 255)
        		  thePixel.setGreen(255);
        	  else if (num4 < 0)
        		  thePixel.setGreen(0);
        	  else
        		  thePixel.setGreen(num4);
          }
      }
      
	  
  }
  
  public void encode( Picture messagePict )
  {

      Pixel[][] messagePixels = messagePict.getPixels2D();
      Pixel[][] currPixels = this.getPixels2D();
      Pixel currPixel = null;
      Pixel messagePixel = null;
      int count = 0;
      for ( int row = 0; row < this.getHeight(); row++ )
      {
          for ( int col = 0; col < this.getWidth(); col++ )
          {
              // if the current pixel red is odd make it even
              currPixel = currPixels[row][col];
              if ( (currPixel.getRed()*currPixel.getBlue()*currPixel.getGreen()) % 2 == 0 ){
            	  if (currPixel.getRed() % 2 == 0)
            		  currPixel.setRed( currPixel.getRed() - 1 );
            	  if (currPixel.getGreen() % 2 == 0)
            		  currPixel.setGreen( currPixel.getGreen() - 1 );
            	  if (currPixel.getBlue() % 2 == 0)
            		  currPixel.setBlue( currPixel.getBlue() - 1 );
              }
              messagePixel = messagePixels[row][col];
              if ( messagePixel.colorDistance( Color.BLACK ) < 50 )
              {
            		  currPixel.setRed( currPixel.getRed() + 1 );
	                  currPixel.setGreen( currPixel.getGreen() + 1 );
	                  currPixel.setBlue( currPixel.getBlue() +1 );
	                  count++;
              }
          }
      }
      System.out.println( count );
  }


  /**
   * Method to decode a message hidden in the red value of the current picture
   * 
   * @return the picture with the hidden message
   */
  public Picture decode()
  {
      Pixel[][] pixels = this.getPixels2D();
      int height = this.getHeight();
      int width = this.getWidth();
      Pixel currPixel = null;
      Pixel messagePixel = null;
      Picture messagePicture = new Picture( height, width );
      Pixel[][] messagePixels = messagePicture.getPixels2D();
      int count = 0;
      for ( int row = 0; row < this.getHeight(); row++ )
      {
          for ( int col = 0; col < this.getWidth(); col++ )
          {
              currPixel = pixels[row][col];
              messagePixel = messagePixels[row][col];
              if ( (currPixel.getRed()*currPixel.getBlue()*currPixel.getGreen()) % 2 == 1 )
              {
                  messagePixel.setColor( Color.BLACK );
                  count++;
              }
          }
      }
      System.out.println( count );
      return messagePicture;
  }
  

  
  
  /* Main method for testing - each class in Java can have a main 
   * method 
   */
  public static void main(String[] args) 
  {
    Picture beach = new Picture("beach.jpg");
    beach.explore();
    beach.zeroBlue();
    beach.explore();
  }
  
} // this } is the end of class Picture, put all new methods before this
